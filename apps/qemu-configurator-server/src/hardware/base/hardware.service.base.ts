/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Hardware as PrismaHardware } from "@prisma/client";

export class HardwareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HardwareCountArgs, "select">): Promise<number> {
    return this.prisma.hardware.count(args);
  }

  async hardwareItems<T extends Prisma.HardwareFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HardwareFindManyArgs>
  ): Promise<PrismaHardware[]> {
    return this.prisma.hardware.findMany<Prisma.HardwareFindManyArgs>(args);
  }
  async hardware<T extends Prisma.HardwareFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HardwareFindUniqueArgs>
  ): Promise<PrismaHardware | null> {
    return this.prisma.hardware.findUnique(args);
  }
  async createHardware<T extends Prisma.HardwareCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HardwareCreateArgs>
  ): Promise<PrismaHardware> {
    return this.prisma.hardware.create<T>(args);
  }
  async updateHardware<T extends Prisma.HardwareUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HardwareUpdateArgs>
  ): Promise<PrismaHardware> {
    return this.prisma.hardware.update<T>(args);
  }
  async deleteHardware<T extends Prisma.HardwareDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HardwareDeleteArgs>
  ): Promise<PrismaHardware> {
    return this.prisma.hardware.delete(args);
  }
}
