/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HardwareService } from "../hardware.service";
import { HardwareCreateInput } from "./HardwareCreateInput";
import { Hardware } from "./Hardware";
import { HardwareFindManyArgs } from "./HardwareFindManyArgs";
import { HardwareWhereUniqueInput } from "./HardwareWhereUniqueInput";
import { HardwareUpdateInput } from "./HardwareUpdateInput";

export class HardwareControllerBase {
  constructor(protected readonly service: HardwareService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hardware })
  async createHardware(
    @common.Body() data: HardwareCreateInput
  ): Promise<Hardware> {
    return await this.service.createHardware({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hardware] })
  @ApiNestedQuery(HardwareFindManyArgs)
  async hardwareItems(@common.Req() request: Request): Promise<Hardware[]> {
    const args = plainToClass(HardwareFindManyArgs, request.query);
    return this.service.hardwareItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hardware })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hardware(
    @common.Param() params: HardwareWhereUniqueInput
  ): Promise<Hardware | null> {
    const result = await this.service.hardware({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hardware })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHardware(
    @common.Param() params: HardwareWhereUniqueInput,
    @common.Body() data: HardwareUpdateInput
  ): Promise<Hardware | null> {
    try {
      return await this.service.updateHardware({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hardware })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHardware(
    @common.Param() params: HardwareWhereUniqueInput
  ): Promise<Hardware | null> {
    try {
      return await this.service.deleteHardware({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
