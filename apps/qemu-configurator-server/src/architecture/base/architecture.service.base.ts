/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Architecture as PrismaArchitecture } from "@prisma/client";

export class ArchitectureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArchitectureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.architecture.count(args);
  }

  async architectures<T extends Prisma.ArchitectureFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchitectureFindManyArgs>
  ): Promise<PrismaArchitecture[]> {
    return this.prisma.architecture.findMany<Prisma.ArchitectureFindManyArgs>(
      args
    );
  }
  async architecture<T extends Prisma.ArchitectureFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchitectureFindUniqueArgs>
  ): Promise<PrismaArchitecture | null> {
    return this.prisma.architecture.findUnique(args);
  }
  async createArchitecture<T extends Prisma.ArchitectureCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchitectureCreateArgs>
  ): Promise<PrismaArchitecture> {
    return this.prisma.architecture.create<T>(args);
  }
  async updateArchitecture<T extends Prisma.ArchitectureUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchitectureUpdateArgs>
  ): Promise<PrismaArchitecture> {
    return this.prisma.architecture.update<T>(args);
  }
  async deleteArchitecture<T extends Prisma.ArchitectureDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchitectureDeleteArgs>
  ): Promise<PrismaArchitecture> {
    return this.prisma.architecture.delete(args);
  }
}
