/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArchitectureService } from "../architecture.service";
import { ArchitectureCreateInput } from "./ArchitectureCreateInput";
import { Architecture } from "./Architecture";
import { ArchitectureFindManyArgs } from "./ArchitectureFindManyArgs";
import { ArchitectureWhereUniqueInput } from "./ArchitectureWhereUniqueInput";
import { ArchitectureUpdateInput } from "./ArchitectureUpdateInput";

export class ArchitectureControllerBase {
  constructor(protected readonly service: ArchitectureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Architecture })
  async createArchitecture(
    @common.Body() data: ArchitectureCreateInput
  ): Promise<Architecture> {
    return await this.service.createArchitecture({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Architecture] })
  @ApiNestedQuery(ArchitectureFindManyArgs)
  async architectures(@common.Req() request: Request): Promise<Architecture[]> {
    const args = plainToClass(ArchitectureFindManyArgs, request.query);
    return this.service.architectures({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Architecture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async architecture(
    @common.Param() params: ArchitectureWhereUniqueInput
  ): Promise<Architecture | null> {
    const result = await this.service.architecture({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Architecture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArchitecture(
    @common.Param() params: ArchitectureWhereUniqueInput,
    @common.Body() data: ArchitectureUpdateInput
  ): Promise<Architecture | null> {
    try {
      return await this.service.updateArchitecture({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Architecture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArchitecture(
    @common.Param() params: ArchitectureWhereUniqueInput
  ): Promise<Architecture | null> {
    try {
      return await this.service.deleteArchitecture({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
