/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdditionalSettingsService } from "../additionalSettings.service";
import { AdditionalSettingsCreateInput } from "./AdditionalSettingsCreateInput";
import { AdditionalSettings } from "./AdditionalSettings";
import { AdditionalSettingsFindManyArgs } from "./AdditionalSettingsFindManyArgs";
import { AdditionalSettingsWhereUniqueInput } from "./AdditionalSettingsWhereUniqueInput";
import { AdditionalSettingsUpdateInput } from "./AdditionalSettingsUpdateInput";

export class AdditionalSettingsControllerBase {
  constructor(protected readonly service: AdditionalSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdditionalSettings })
  async createAdditionalSettings(
    @common.Body() data: AdditionalSettingsCreateInput
  ): Promise<AdditionalSettings> {
    return await this.service.createAdditionalSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdditionalSettings] })
  @ApiNestedQuery(AdditionalSettingsFindManyArgs)
  async additionalSettingsItems(
    @common.Req() request: Request
  ): Promise<AdditionalSettings[]> {
    const args = plainToClass(AdditionalSettingsFindManyArgs, request.query);
    return this.service.additionalSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdditionalSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async additionalSettings(
    @common.Param() params: AdditionalSettingsWhereUniqueInput
  ): Promise<AdditionalSettings | null> {
    const result = await this.service.additionalSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdditionalSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdditionalSettings(
    @common.Param() params: AdditionalSettingsWhereUniqueInput,
    @common.Body() data: AdditionalSettingsUpdateInput
  ): Promise<AdditionalSettings | null> {
    try {
      return await this.service.updateAdditionalSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdditionalSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdditionalSettings(
    @common.Param() params: AdditionalSettingsWhereUniqueInput
  ): Promise<AdditionalSettings | null> {
    try {
      return await this.service.deleteAdditionalSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
